===========
Testmachine
===========

Testmachine is a new way of testing. It's strongly inspired by
quickcheck and the stateful testing approach from `Scalacheck
<https://github.com/rickynils/scalacheck>`_ and `hypothesis 
<https://github.com/DRMacIver/hypothesis>`_, but with a twist
that I think makes it much more powerful.

Of course, this library is currently not even a working proof of concept yet.
The original testmachine is some code I wrote for `intmap
<https://github.com/DRMacIver/intmap>`_ and is a hilarious mix of C and python 
which is extremely tailored to the code it's testing. I found it so
outrageously powerful that I'm now trying to generalise it to something more
broadly applicable. I think I've got the basic design right but it's going to
take some exploration.

Basic idea:

A testmachine has a number of varstacks (literally just named stacks of stuff)
and a language. A language describes operations on varstacks. The goal of a
testmachine is to find a sequence of operations in its language that raise an
error.

The reason why this is strictly more general than the concept of quickcheck is
that it can potentially include a much larger algebra of operations for 
generating data than a normal Arbitrary instance captures. In principle you
could write an Arbitrary instance which does this, but in practice both no-one
does and the output would be unenlightening unless you had a way of inspecting
the exact expression that the instance generated.

In the original testmachine the run of stack operations is then compiled to a
single assignment form independently of stacks to produce a very readable test
output. I'm hoping that will be the case here too though I'm still sorting out
the details.
